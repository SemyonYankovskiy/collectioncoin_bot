from typing import List
from datetime import datetime, timedelta

import requests
import openpyxl
import matplotlib.pyplot as plt
from database import DataCoin, User
import pandas as pd
from bs4 import BeautifulSoup

from .name_transformer import transformer


# –∫–ª–∞—Å—Å –æ—à–∏–±–æ–∫
class AuthFail(Exception):
    pass


HEADERS = {
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 "
    "YaBrowser/23.3.0.2246 Yowser/2.5 Safari/537.36"
}


def authorize(username, password):
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–∏
    with requests.Session() as session:
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –Ω–∞ —Å–∞–π—Ç–µ
        resp = session.post(
            "https://ru.ucoin.net/login",
            data={"email": username, "passwd": password, "remember": 1},
            headers=HEADERS,
            allow_redirects=False,
        )
        if resp.status_code != 302:
            raise AuthFail("–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        # print(resp.headers.get("Location"))
        user_coin_id = "".join(filter(str.isdigit, resp.headers.get("Location")))
        print(user_coin_id, "Connected")
        return user_coin_id, session


def get_graph(telegram_id):
    graph_coin_data: List[DataCoin] = DataCoin.get_for_user(telegram_id)
    print(len(graph_coin_data))

    graph_date = []
    graph_sum = []

    # last_date = datetime.strptime(graph_coin_data[0].datetime, "%Y.%m.%d")
    last_date = datetime.now().date()

    for sublist in graph_coin_data[::1]:
        while datetime.strptime(sublist.datetime, "%Y.%m.%d").date() != last_date:
            graph_date.append(last_date.strftime("%Y.%m.%d"))
            graph_sum.append(None)
            last_date -= timedelta(days=1)

        graph_date.append(sublist.datetime)
        graph_sum.append(sublist.totla_sum)
        last_date -= timedelta(days=1)

    graph_date_last_30_days = graph_date[:30]
    graph_summ_last_30_days = graph_sum[:30]
    step = len(graph_date_last_30_days) // 15

    plt.clf()
    plt.figure(figsize=(step * 5, step * 3), dpi=100)
    plt.plot(
        graph_date_last_30_days[::-1],
        graph_summ_last_30_days[::-1],
        marker="o",
        markersize=4,
    )

    new_list = list(map(lambda x: x[5:], graph_date_last_30_days))

    plt.xticks(graph_date_last_30_days[::step], new_list[::step])

    plt.title("–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Ä—É–±")

    #  –ü—Ä–µ–∂–¥–µ —á–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    #  –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –¥–µ–ª–µ–Ω–∏—è
    plt.minorticks_on()

    #  –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ª–∏–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏:
    plt.grid(which="major")

    #  –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ª–∏–Ω–∏–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π
    #  —Å–µ—Ç–∫–∏:
    plt.grid(
        which="minor",
        linestyle=":",
    )

    plt.savefig(f"{telegram_id}_plot.png")
    return f"{telegram_id}_plot.png"


def refresh(telegram_id):
    user = User.get(telegram_id)
    user_coin_id, session = authorize(user.email, user.password)
    file_name = download(user_coin_id, session)
    total = file_opener(file_name)
    DataCoin(user.telegram_id, total).save()
    parsing(session, user, user_coin_id)


def parsing(session, user, user_coin_id):
    response = session.get(
        url=f"https://ru.ucoin.net/uid{user_coin_id}?v=home",
        headers=HEADERS,
    )
    print(response)
    soup = BeautifulSoup(response.content, "html.parser")
    results = soup.find(id="notify-popup")

    tag_messages = results.select("a:nth-child(4) div")
    tag_swap = results.select("a:nth-child(5) div")

    new_messages_count = tag_messages[1].text if len(tag_messages) == 2 else "0"
    new_swap_count = tag_swap[1].text if len(tag_swap) == 2 else "0"
    if new_messages_count.isdigit() and new_swap_count.isdigit():
        user.new_messages = int(new_messages_count)
        user.new_swap = int(new_swap_count)
        user.save()
        print("—Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("–≠—Ç–∞ —Ö—É–π–Ω—è tag_messages tag_swap —Ö–æ—Ç–µ–ª–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")


def download(user_coin_id: str, session: requests.Session):
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    response = session.get(
        # URL —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å
        url=f"https://ru.ucoin.net/uid{user_coin_id}?export=xls",
        headers=HEADERS,
    )

    # –ò–º—è —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    file_name = f"./users_files/{user_coin_id}_.xlsx"
    with open(file_name, "wb") as f:
        f.write(response.content)

    response2 = session.get(
        # URL —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å
        url=f"https://ru.ucoin.net/swap-list/?uid={user_coin_id}&export=xls",
        headers=HEADERS,
    )
    # –ò–º—è —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    file_name2 = f"./users_files/{user_coin_id}_SWAP.xlsx"
    with open(file_name2, "wb") as f:
        f.write(response2.content)

    return file_name


def more_info(file_name):
    df = pd.read_excel(file_name)
    countryroad = df[df.columns[0]].unique()  # —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω

    return len(df), len(countryroad)


def countries(file_name):
    df = pd.read_excel(file_name)
    result = []
    grouped = df.groupby("–°—Ç—Ä–∞–Ω–∞").size()
    for country, count in grouped.items():
        # result += f"{mydict1[country]} {str(count):<5}{country}\n            /{mydict[country]}\n"
        result.append(
            [
                transformer.get_country_code(country),  # –§–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã
                count,  # –ö–æ–ª-–≤–æ –º–æ–Ω–µ—Ç
                country,  # –†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
                transformer.get_country_eng_short_name(country),  # –ö–æ—Ä–æ—Ç–∫–æ–µ –∞–Ω–≥–ª. –Ω–∞–∑–≤–∞–Ω–∏–µ
            ]
        )
    wb = openpyxl.load_workbook(file_name)
    ws = wb.active

    count_euro = 0
    for row in ws.iter_rows(min_row=1, max_col=7):
        if "–µ–≤—Ä–æ" in row[1].value:
            count_euro += 1

    result.append(
        [
            f"üá™üá∫",
            count_euro,
            f"–ï–≤—Ä–æ—Å–æ—é–∑",
            f"Europe",
        ]
    )
    return result


def euro(file_name):

    wb = openpyxl.load_workbook(file_name)
    ws = wb.active
    euros = []

    for row in ws.iter_rows(min_row=1, max_col=7):
        if "–µ–≤—Ä–æ" in row[1].value:
            des3 = (
                f"\n–ú–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä: {row[3].value}" if row[3].value else ""
            )  # –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä
            des4 = f"\n{row[4].value}" if row[4].value else ""  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ

            euros.append(
                [
                    f"üá™üá∫ {transformer.get_country_code(row[0].value)}",  # –°—Ç—Ä–∞–Ω–∞
                    row[1].value,  # –Ω–æ–º–∏–Ω–∞–ª
                    row[2].value,  # –ì–û–î
                    f"{row[6].value} ‚ÇΩ",
                    des3,
                    des4,
                ]
            )

    return euros


def strana(file_name, text_in):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª Excel —Å –∏–º–µ–Ω–µ–º data.xlsx
    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –≤ —Ñ–∞–π–ª–µ
    wb = openpyxl.load_workbook(file_name)
    ws = wb.active

    # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    text = text_in
    string_without_first_char = text[1:]
    # df = pd.read_excel("./config/EngtoRu.xlsx", header=None)  # assuming no header
    # mydict = df.set_index(0)[
    #     1
    # ].to_dict()  # setting first column as index and second column as values
    text2 = transformer.get_country_rus_name(string_without_first_char)

    arr = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ G
    for row in ws.iter_rows(min_row=1, max_col=7):
        if row[0].value == text2:
            desc3 = (
                f"\n–ú–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä: {row[3].value}" if row[3].value else ""
            )  # –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä
            desc4 = f"\n{row[4].value}" if row[4].value else ""  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            arr.append(
                [
                    transformer.get_country_code(row[0].value),
                    row[1].value,
                    row[2].value,
                    f"{row[6].value} ‚ÇΩ",
                    desc3,
                    desc4,
                ]
            )

    return arr


def func_swap(file_name):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª Excel —Å –∏–º–µ–Ω–µ–º data.xlsx
    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –≤ —Ñ–∞–π–ª–µ
    wb = openpyxl.load_workbook(file_name)
    ws = wb.active

    arr = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ G
    for row in ws.iter_rows(min_row=2, max_col=11):
        desc4 = f"{row[4].value}" if row[4].value else ""  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        desc3 = f"{row[3].value}" if row[3].value else ""  # –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä
        desc10 = (
            f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row[10].value}" if row[10].value else ""
        )  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        arr.append(
            [
                transformer.get_country_code(row[0].value),  # –§–ª–∞–≥
                row[1].value,  # –ù–æ–º–∏–Ω–∞–ª
                row[2].value,  # –ì–æ–¥
                f" {row[6].value} ‚ÇΩ",  # –¶–µ–Ω–∞
                f"\n–ö–æ–ª-–≤–æ: {row[7].value}",  # –ö–æ–ª-–≤–æ
                desc3,  # –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä
                desc4,  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                desc10,  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            ]
        )
    return arr


def file_opener(file_name):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª Excel —Å –ø–æ–º–æ—â—å—é openpyxl
    wb = openpyxl.load_workbook(file_name)
    ws = wb.active

    total = 0

    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ G
    for row in ws.iter_rows(min_row=2, max_col=9):
        # print(row[6].value)
        if not row[6].value:
            continue

        if row[8].value != "–ú–µ—Ç–∫–∞ 13":
            total += row[6].value

    return round(total, 2)

def get_top_10_coin(file_name, mode):

    df = pd.read_excel(file_name)
    arr = []
    df.fillna(value='', inplace=True)

    if mode == 'old':
        df = df.sort_values(by='–ì–æ–¥', ascending=True)
    elif mode == 'novelty':
        df = df.sort_values(by='–ì–æ–¥', ascending=False)
    elif mode == 'expensive_value':
        df['–¶–µ–Ω–∞, RUB [uCoin]'] = pd.to_numeric(df['–¶–µ–Ω–∞, RUB [uCoin]'], errors='coerce')
        df = df.sort_values(by='–¶–µ–Ω–∞, RUB [uCoin]', ascending=False)
    elif mode == 'cheap_value':
        df['–¶–µ–Ω–∞, RUB [uCoin]'] = pd.to_numeric(df['–¶–µ–Ω–∞, RUB [uCoin]'], errors='coerce')
        df = df.sort_values(by='–¶–µ–Ω–∞, RUB [uCoin]', ascending=True)
    elif mode == 'last_append':
        df = df.sort_values(by='–î–æ–±–∞–≤–ª–µ–Ω–æ', ascending=False)
    elif mode == 'first_append':
        df = df.sort_values(by='–î–æ–±–∞–≤–ª–µ–Ω–æ', ascending=True)


    top_10 = df.head(10)


    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ G
    for row in top_10.iterrows():
        desc4 = f"{row[1][4]}"  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        desc3 = f"{row[1][3]}"  # –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä
        desc10 = (
            f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row[1][16]}" if row[1][16] else ""
        )  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        desc5 = f" {row[1][6]} ‚ÇΩ" if row[1][6] else "" # –¶–µ–Ω–∞
        arr.append(
            [
                transformer.get_country_code(row[1][0]),  # –§–ª–∞–≥
                row[1][1],  # –ù–æ–º–∏–Ω–∞–ª
                row[1][2],  # –ì–æ–¥
                desc5,  # –¶–µ–Ω–∞

                desc3,  # –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä
                desc4,  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                desc10,  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            ]
        )


    return arr