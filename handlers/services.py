import asyncio
from datetime import datetime
from aiogram.utils import exceptions
import emoji
from core.site_calc import more_info, refresh
from core.types import MessageWithUser
from database import DataCoin, User
from helpers.handler_decorators import check_and_set_user
from helpers.limiter import rate_limit
from settngs import dp, bot


@dp.message_handler(commands=["refresh"])
@check_and_set_user
@rate_limit(600)
async def refresh_data(message: MessageWithUser):
    print(datetime.now(), "| USER:", message.from_user.id, 'commands=["refresh"]')

    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""

    await bot.send_chat_action(chat_id=message.from_id, action="find_location")

    refresh(message.from_user.id)
    await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_message_to_user(user_id: int, text: str, disable_notification: bool = False) -> bool:
    user = User.get(user_id)
    try:
        await bot.send_message(user_id, text, disable_notification=disable_notification, parse_mode="MARKDOWN")
    except exceptions.BotBlocked:
        print(datetime.now(), "| ", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user.email}] –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except exceptions.ChatNotFound:
        print(datetime.now(), "| ", f"–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user.email}]")
    except exceptions.RetryAfter as e:
        print(datetime.now(), "| ", f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è [{user.email}]. –ñ–¥–∏ {e.timeout} —Å–µ–∫.")
        await asyncio.sleep(e.timeout)
        return await send_message_to_user(user_id, text)
    except exceptions.UserDeactivated:
        print(datetime.now(), "| ", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user.email}] –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    except exceptions.TelegramAPIError:
        print(datetime.now(), "| ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [{user.email}]")
    else:
        print(datetime.now(), "| ", f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [{user.email}]")
        return True
    return False


@dp.message_handler(commands=["summ"])
@check_and_set_user
async def summ(message: MessageWithUser):

    await message.answer(emoji.emojize(":coin:"))
    await _summ(message)


@check_and_set_user
async def _summ(message: MessageWithUser):
    print(datetime.now(), "| USER:", message.from_user.id, 'commands=["summ"]')

    coin_st = DataCoin.get_for_user(message.from_user.id, limit=1)
    # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ more info, –ø–µ—Ä–µ–¥–∞–µ–º –≤ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ 4 —Å—Ç–æ–ª–±—Ü–∞ –º–∞—Å—Å–∏–≤–∞)
    try:
        lot, count, sold = more_info(f"./users_files/{message.user.user_coin_id}_.xlsx")

        await message.answer(
            f"ü™ô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç {lot} \n"
            f"üåê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω {count} \n\n"
            f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {coin_st[0].totla_sum} —Ä—É–±. \n\n"
            f"üí∂ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {sold} —Ä—É–±. "
        )
    except Exception:
        await message.answer(f"–û–π! –û–±–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é \n/refresh")
