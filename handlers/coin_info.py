from datetime import datetime

from aiogram.dispatcher.filters import Command, Text

from core.name_transformer import transformer
from core.site_calc import countries, strana, func_swap, euro
from helpers.types import MessageWithUser
from handlers.services import send_message_to_user
from helpers.comands import countries_cmd
from helpers.handler_decorators import check_and_set_user
from settngs import dp


@dp.message_handler(Text(equals="–°—Ç—Ä–∞–Ω—ã"))
@dp.message_handler(commands=["countries"])
@check_and_set_user
async def output_counties(message: MessageWithUser):
    print(datetime.now(), "| ", message.from_user.id, 'commands=["countries"]')

    # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ countries, –ø–µ—Ä–µ–¥–∞–µ–º –≤ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π coin_st(–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ 4 —Å—Ç–æ–ª–±—Ü–∞ –º–∞—Å—Å–∏–≤–∞)
    # —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ strani

    try:
        strani = countries(f"./users_files/{message.user.user_coin_id}_.xlsx")
    except Exception as e:
        await send_message_to_user(726837488, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {e}, –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω")
        await message.answer(f"–û–π! –û–±–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é \n/refresh")
        return
    # –£—Å–ª–æ–≤–∏–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞, –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –¥–ª–∏–Ω–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    data_length = 0
    output = ""
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    for flag, count, name, cmd in strani:
        part = f"{flag} {count:<5}{name}\n           /{cmd}\n"
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—É —Å—Ç—Ä–æ–∫–∏
        part_len = len(part)
        # —Å—É–º–º–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
        data_length += part_len
        # –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –¥–ª–∏–Ω–Ω—ã –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –±–æ–ª—å—à–µ —á–µ–º 4096 —Å–∏–º–≤–æ–ª–æ–≤
        if data_length > 4096:
            await message.answer(output)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é output, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
            output = part
            data_length = part_len
        else:
            output += part
    await message.answer(output)


@check_and_set_user
async def vyvod_monet(message: MessageWithUser, input_list):
    data_length = 0
    output = ""
    output_with_header = ""

    string_without_first_char = message.text[1:]
    text2 = transformer.get_country_rus_name(string_without_first_char)

    for country_name, flag, nominal, year, cena, md, name_for_output, pokupka, kommentariy in input_list:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å @pic –∫–∞–∫ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        name = name_for_output
        if name_for_output != "":
            name = f"\n{name_for_output}"
        if md != "":
            md = f"\n{md}"
        if pokupka != "":
            pokupka = f"\n{pokupka}"
        if kommentariy != "":
            kommentariy = f"\n{kommentariy}"

        if message.user.show_pictures == True:
            if name_for_output != "":
                pic_line = f"@pic {country_name} {nominal} {name_for_output}"
            else:
                pic_line = f"@pic {country_name} {nominal} {year}"
            part = f"{flag} {nominal} {year} {cena} {md} {name} {pokupka} {kommentariy}\n`{pic_line}`\n\n"
        else:
            part = f"{flag} {nominal} {year} {cena} {md} {name} {pokupka} {kommentariy}\n\n"

        part_len = len(part)
        data_length += part_len

        if data_length > 4012:
            if "üá™üá∫" in flag:
                flag = "üá™üá∫"
                text2 = "–ï–≤—Ä–æ—Å–æ—é–∑"
            output_with_header = f"{flag}  {text2}\n----------------------------------------\n" + output
            await send_message_to_user(message.from_user.id, output_with_header)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é output.
            output = part
            data_length = part_len
        else:
            if "üá™üá∫" in flag:
                flag = "üá™üá∫"
                text2 = "–ï–≤—Ä–æ—Å–æ—é–∑"
            output += part
            output_with_header = f"{flag}  {text2}\n----------------------------------------\n" + output

    await send_message_to_user(message.from_user.id, output_with_header, parse_mode="MARKDOWN")


@dp.message_handler(commands=["europe"])
@check_and_set_user
async def output_eurocoin(message: MessageWithUser):
    print(datetime.now(), "| ", message.from_user.id, 'commands=["europe"]')
    try:
        euro1 = euro(f"./users_files/{message.user.user_coin_id}_.xlsx")
        await vyvod_monet(message, euro1)
    except Exception as e:
        await send_message_to_user(726837488, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {e}, –≤ —Ñ—É–Ω–∫—Ü–∏–∏ (output eurocoin)")
        await message.answer(f"–û–π! –û–±–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é \n/refresh")


@dp.message_handler(Command(countries_cmd))
@check_and_set_user
async def output_coin(message: MessageWithUser):
    strani = strana(f"./users_files/{message.user.user_coin_id}_.xlsx", message.text)
    await vyvod_monet(message, strani)


@dp.message_handler(commands=["swap_list"])
@check_and_set_user
async def swap(message: MessageWithUser):
    print(datetime.now(), "| ", message.from_user.id, 'commands=["swap_list"]')

    try:
        swap_list = func_swap(f"./users_files/{message.user.user_coin_id}_SWAP.xlsx")
    except Exception as e:
        await send_message_to_user(726837488, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {e}, –≤ —Ñ—É–Ω–∫—Ü–∏–∏ swap")
        await message.answer(f"–û–π! –û–±–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é \n/refresh")
        return

    output = ""
    max_length = 4096

    for country, coins in swap_list.items():
        flag = transformer.get_country_code(country)
        country_header = f"\n{flag} {country}\n--------------------------\n"
        country_data = country_header

        for coin in coins:
            part = f"{flag} {coin[1]} {coin[2]} {coin[3]} {coin[4]} {coin[5]} {coin[6]} {coin[7]}\n\n"
            country_data += part

        if len(output) + len(country_data) > max_length:

            await message.answer(output)  # Send the current accumulated output.
            output = country_data  # Start new output with the current country's data.
        else:
            output += country_data

    if not output:
        await message.answer("–°–ø–∏—Å–æ–∫ –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
    else:
        await message.answer(output)
