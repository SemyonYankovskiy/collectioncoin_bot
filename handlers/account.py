from datetime import datetime

import emoji
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from core.site_calc import authorize, AuthFail, download, file_opener
from core.types import MessageWithUser
from database import User, DataCoin
from helpers.handler_decorators import check_and_set_user
from settngs import dp, bot


def get_user_profile_keyboard():
    keyboard = InlineKeyboardButton(
        "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è –∫–∞—Ä—Ç—ã", callback_data=f"choose_color_map_scheme"
    )

    return InlineKeyboardMarkup().add(keyboard)


@dp.message_handler(commands=["profile"])
@check_and_set_user
async def profile(message: MessageWithUser):
    print(datetime.now(),"| ",  message.from_user.id, 'commands=["profile"]')
    user = User.get(message.from_user.id)
    message_status = f"‚úâÔ∏è" if user.new_messages == 0 else f"üì©"
    swap_status = f"‚ùï" if user.new_swap == 0 else f"‚ùóÔ∏è"

    keyboard = get_user_profile_keyboard()

    await message.answer(
        f'<a href="https://ru.ucoin.net/uid{message.user.user_coin_id}?v=home">üë§ –ü—Ä–æ—Ñ–∏–ª—å</a>\n'
        f"{message_status} –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {user.new_messages} \n{swap_status} –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ {user.new_swap}",
        parse_mode="HTML",
        reply_markup=keyboard,
    )


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
class Form(StatesGroup):
    email = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    password = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è


@dp.message_handler(commands=["reg"])
async def reg_welcome(message: MessageWithUser):
    print(datetime.now(),"| ",  message.from_user.id, 'commands=["reg"]')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å 1 –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º, –µ—Å–ª–∏ –≤—Å—ë –æ–∫, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    # –∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ email —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é process_email
    if User.get(tg_id=message.from_user.id) is None:
        await message.answer("–§–∏–∫—Å–∏—Ä—É—é. –í–≤–æ–¥–∏ email \n________________________ \n–ò–ª–∏ –∂–º–∏ /EXIT")
        await message.answer(emoji.emojize(":monkey_face:"))
        await Form.email.set()
        return
    else:
        await message.answer("–¢—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")
        return


# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ email
@dp.message_handler(state=Form.email)
async def process_email(message: MessageWithUser, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ EXIT
    if message.text.lower() == "/exit":
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π state
        await message.answer("‚¨áÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–∞–∫–æ–π –∂–µ –ø–æ—á—Ç—ã, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º
    # –∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ password
    if User.has_user_with_email(email=message.text):
        await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
        await message.answer("–ü–æ—á—Ç–∞ –≤–æ—Ä–æ–≤–∞–Ω–Ω–∞—è, –ø—ë—Å")
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await state.update_data(user_Email=message.text)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ password
        await message.answer(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å \n________________________ \n–ò–ª–∏ –∂–º–∏ /EXIT")
        await message.answer(emoji.emojize("\U0001F648"))
        await Form.next()


# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ password
@dp.message_handler(state=Form.password)
async def process_password(message: MessageWithUser, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ EXIT
    if message.text.lower() == "/exit":
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π state
        await message.answer("‚¨áÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await state.update_data(user_password=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    temp = await state.get_data()
    user_email = temp.get("user_Email")
    user_password = temp.get("user_password")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç
        user_coin_id, session = authorize(user_email, user_password)
        file_name = download(user_coin_id, session)
        total, total_count = file_opener(file_name)
        DataCoin.init_new_user(message.from_user.id, total, total_count)

    # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    except AuthFail:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ, —Ç–æ –ø—Ä–æ—Å–∏–º –µ–≥–æ –≤–≤–µ—Å—Ç–∏ –∏—Ö —Å–Ω–æ–≤–∞
        await Form.email.set()  # –ó–∞–Ω–æ–≤–æ –±—É–¥–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å email
        await message.answer(
            f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å \n"
            f"\n–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email \n________________________ \n–ò–ª–∏ –∂–º–∏ /EXIT"
        )

        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–µ—Ä–Ω—ã–µ, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        telegram_id=message.from_user.id,
        email=user_email,
        password=user_password,
        user_coin_id=user_coin_id,
    )
    user.save()

    await bot.delete_message(message.from_user.id, message.message_id)

    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\n" "–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É")
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞
    await state.finish()


class DeleteForm(StatesGroup):
    confirm_delete = State()  # 1 —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–æ—Ç–∞
    confirm_delete2 = State()  # 2 —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–æ—Ç–∞


@dp.message_handler(commands=["delete"])
@check_and_set_user
async def delete1(message: MessageWithUser):
    print(datetime.now(),"| ",  message.from_user.id, 'commands=["delete"]')

    await DeleteForm.confirm_delete.set()
    await message.answer(
        "–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∏—Ä–∞—é—Ç—Å—è —Ç–∞–∫–∂–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç, –≥—Ä–∞—Ñ–∏–∫ –æ–±–Ω—É–ª—è–µ—Ç—Å—è"
    )
    await message.answer("–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å? \n–ø–∏—à–∏   –¥–∞   –∏–ª–∏   –Ω–µ—Ç")


@dp.message_handler(state=DeleteForm.confirm_delete)
@check_and_set_user
async def delete2(message: MessageWithUser, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await DeleteForm.confirm_delete2.set()
        await message.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å–ø—Ä–∞—à–∏–≤–∞—é \n–ø–∏—à–∏   –¥–∞   –∏–ª–∏   –Ω–µ—Ç")

    else:
        await message.answer("–ù—É –∏ –≤—Å—ë, –±–æ–ª—å—à–µ —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞–π")

        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π state


@dp.message_handler(state=DeleteForm.confirm_delete2)
@check_and_set_user
async def delete3(message: MessageWithUser, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        User.delete(tg_id=message.from_user.id)
        DataCoin.delete_user_data(tg_id=message.from_user.id)
        await message.answer("–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ \n‚Üì‚Üì‚Üì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")

    else:
        await message.answer("–ù—É –∏ –Ω–∞—Ö—É–π —Ç—ã –º–Ω–µ –º–æ–∑–≥—É –µ–±–µ—à—å, –∫–æ–∂–∞–Ω—ã–π –º–µ—à–æ–∫")

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π state
