import logging
import os
import emoji

from aiogram.dispatcher.filters import Command
from aiogram.types import InputFile
from threading import Thread

from gather import gather_manager, gather_graph_data, GatherFail
from site_calc import (
    authorize,
    AuthFail,
    get_graph,
    download,
    file_opener,
    more_info,
    countries,
    strana,
    func_swap,
    euro
)


from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from database import Database, User, DataCoin


API_TOKEN = os.getenv('TG_TOKEN')

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

Database.create_tables()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
class Form(StatesGroup):
    email = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    password = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è


class DeleteForm(StatesGroup):
    confirm_delete = State()  # 1 —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–æ—Ç–∞
    confirm_delete2 = State()   # 2 —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–æ—Ç–∞


@dp.message_handler(commands=["start"])
async def hello_welcome(message: types.Message):
    await message.answer(emoji.emojize(":robot:"))
    await message.answer(f"–ó–¥–∞—Ä–æ–≤–∞, {message.from_user.full_name}")
    await message.answer("‚¨áÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")


# –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@dp.message_handler(commands=["refresh"])
async def refresh_data(message: types.Message):
    try:
        # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
        gather_graph_data()
        await message.answer('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ')
    # –ª–æ–≤–∏–º –æ—à–∏–±–∫—É –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
    except GatherFail:
        await message.answer('–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã')
        return


@dp.message_handler(commands=["help"])
async def ua_welcome(message: types.Message):
    await message.answer(
        "üí¨ –≠—Ç–æ—Ç –±–æ—Ç –±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ Ucoin \n/profile, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
        "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ "
        "–±–æ—Ç–µ /reg \n \nüí¨ –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç –±—É–¥–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏,—Å–ø–∏—Å–∫–µ –æ–±–º–µ–Ω–∞\n"
        "/swap_list, "
        "—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç /summ, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –ø–æ —Å—Ç—Ä–∞–Ω–∞–º /countries,  "
        "–∞ —Ç–∞–∫–∂–µ —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü /grafik\n \n"
        "üí¨ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–æ—Ç–∞ /delete. –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∏—Ä–∞—é—Ç—Å—è —Ç–∞–∫–∂–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ "
        "–º–æ–Ω–µ—Ç,"
        "–≥—Ä–∞—Ñ–∏–∫ –æ–±–Ω—É–ª—è–µ—Ç—Å—è \n \n"
        "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –º–æ–Ω–µ—Ç—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ (–Ω–∞ —Å–∞–π—Ç–µ Ucoin) –¥–ª—è –º–æ–Ω–µ—Ç—ã –∂–µ–ª—Ç—É—é "
        "–º–µ—Ç–∫—É (—Å–º.—Ä–∏—Å. –Ω–∏–∂–µ)"
    )
    await bot.send_photo(chat_id=message.from_user.id, photo=InputFile("img/help.png"))
    await message.answer("‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ @M0IIC")
    await message.answer("‚¨áÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")


@dp.message_handler(commands=["reg"])
async def reg_welcome(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å 1 –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º, –µ—Å–ª–∏ –≤—Å—ë –æ–∫, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    # –∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ email —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é process_email
    if User.get(tg_id=message.from_user.id) is None:
        await message.reply(
            "–§–∏–∫—Å–∏—Ä—É—é. –í–≤–æ–¥–∏ email \n________________________ \n–ò–ª–∏ –∂–º–∏ /EXIT"
        )
        await message.answer(emoji.emojize(":monkey_face:"))
        await Form.email.set()
        return
    else:
        await message.reply("–¢—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")
        return


# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ email
@dp.message_handler(state=Form.email)
async def process_email(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ EXIT
    if message.text.lower() == "/exit":
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π state
        await message.answer("‚¨áÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–∞–∫–æ–π –∂–µ –ø–æ—á—Ç—ã, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º
    # –∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ password
    if User.check_email(email=message.text) is None:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await state.update_data(user_Email=message.text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ password
        await message.answer(
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å \n________________________ \n–ò–ª–∏ –∂–º–∏ /EXIT"
        )
        await message.answer(emoji.emojize("\U0001F648"))
        await Form.next()
    else:
        await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
        await message.answer("–ü–æ—á—Ç–∞ –≤–æ—Ä–æ–≤–∞–Ω–Ω–∞—è, –ø—ë—Å")
        return


# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ password
@dp.message_handler(state=Form.password)
async def process_password(message: types.Message, state: FSMContext):

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ EXIT
    if message.text.lower() == "/exit":
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π state
        await message.answer("‚¨áÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await state.update_data(user_password=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    temp = await state.get_data()
    user_email = temp.get("user_Email")
    user_password = temp.get("user_password")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç
        user_coin_id, session = authorize(user_email, user_password)
        file_name = download(user_coin_id, session)
        total = file_opener(file_name)
        DataCoin.init_new_user(message.from_user.id, total, user_coin_id)

    # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    except AuthFail:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ, —Ç–æ –ø—Ä–æ—Å–∏–º –µ–≥–æ –≤–≤–µ—Å—Ç–∏ –∏—Ö —Å–Ω–æ–≤–∞
        await Form.email.set()  # –ó–∞–Ω–æ–≤–æ –±—É–¥–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å email
        await message.answer(
            f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å \n"
            f"\n–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email \n________________________ \n–ò–ª–∏ –∂–º–∏ /EXIT"
        )

        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–µ—Ä–Ω—ã–µ, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(message.from_user.id, user_email, user_password)
    user.save()

    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\n" "–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É")
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞
    await state.finish()


@dp.message_handler(commands=["summ"])
async def summ(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    if User.get(tg_id=message.from_user.id) is None:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ")
        return
    # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ë–î, —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é get_for_user, –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    coin_st = DataCoin.get_for_user(message.from_user.id)
    # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ more info, –ø–µ—Ä–µ–¥–∞–µ–º –≤ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ 4 —Å—Ç–æ–ª–±—Ü–∞ –º–∞—Å—Å–∏–≤–∞)
    lot, count = more_info(f"./users_files/{coin_st[-1][4]}_.xlsx")

    await message.answer(emoji.emojize(":coin:"))
    await message.answer(
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç {lot} \n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω {count} \n"
        f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {coin_st[-1][3]} —Ä—É–±."
    )


@dp.message_handler(commands=["countries"])
async def output_counties(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    if User.get(tg_id=message.from_user.id) is None:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ")
        return
    # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ë–î, —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é get_for_user, –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    coin_st = DataCoin.get_for_user(message.from_user.id)
    # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ countries, –ø–µ—Ä–µ–¥–∞–µ–º –≤ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π coin_st(–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ 4 —Å—Ç–æ–ª–±—Ü–∞ –º–∞—Å—Å–∏–≤–∞)
    # —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ strani
    strani = countries(f"./users_files/{coin_st[-1][4]}_.xlsx")

    # –£—Å–ª–æ–≤–∏–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞, –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –¥–ª–∏–Ω–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    data_length = 0
    output = ""
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    for flag, count, name, cmd in strani:
        part = f"{flag} {count:<5}{name}\n           /{cmd}\n"
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—É —Å—Ç—Ä–æ–∫–∏
        part_len = len(part)
        # —Å—É–º–º–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
        data_length += part_len
        # –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –¥–ª–∏–Ω–Ω—ã –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –±–æ–ª—å—à–µ —á–µ–º 4096 —Å–∏–º–≤–æ–ª–æ–≤
        if data_length > 4096:
            await message.answer(output)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é output, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
            output = part
            data_length = part_len
        else:

            output += part
    await message.answer(output)


async def vyvod_monet(message: types.Message, input_list):

    data_length = 0
    output = ""
    for flag, nominal, year, cena, md, name in input_list:
        part = f"{flag} {nominal} {year} {cena} {md} {name}\n\n"
        part_len = len(part)
        data_length += part_len
        if data_length > 4096:
            await message.answer(output)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é output.
            output = part
            data_length = part_len
        else:

            output += part
    await message.answer(output)


@dp.message_handler(commands=["europe"])
async def output_eurocoin(message: types.Message):
    if User.get(tg_id=message.from_user.id) is None:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ")
        return
    coin_st = DataCoin.get_for_user(message.from_user.id)
    euro1 = euro(f"./users_files/{coin_st[-1][4]}_.xlsx")
    await vyvod_monet(message, euro1)


@dp.message_handler(
    Command(
        [
            "Australia",
            "Austria",
            "Azerbaijan",
            "Albania",
            "Algeria",
            "American_Samoa",
            "Anguilla",
            "Angola",
            "Andorra",
            "Antarctica",
            "Antigua_and_Barbuda",
            "Argentina",
            "Armenia",
            "Aruba",
            "Afghanistan",
            "Bahamas",
            "Bangladesh",
            "Barbados",
            "Bahrain",
            "Belarus",
            "Belize",
            "Belgium",
            "Benin",
            "Bermuda",
            "Bulgaria",
            "Bolivia",
            "Bonaire",
            "Bosnia_and_Herzegovina",
            "Botswana",
            "Brazil",
            "British Indian Ocean Territory",
            "Brunei",
            "Burkina_Faso",
            "Burundi",
            "Bhutan",
            "Vanuatu",
            "Hungary",
            "Venezuela",
            "Virgin Islands_British",
            "Virgin_Islands",
            "Vietnam",
            "Gabon",
            "Haiti",
            "Guyana",
            "Gambia",
            "Ghana",
            "Guadeloupe",
            "Guatemala",
            "Guinea",
            "Guinea_Bissau",
            "Germany",
            "Guernsey",
            "Gibraltar",
            "Honduras",
            "Hong_Kong",
            "Grenada",
            "Greenland",
            "Greece",
            "Georgia",
            "Guam",
            "Denmark",
            "Jersey",
            "Djibouti",
            "Dominica",
            "Dominican_Republic",
            "Egypt",
            "Zambia",
            "Western_Sahara",
            "Zimbabwe",
            "Israel",
            "India",
            "Indonesia",
            "Jordan",
            "Iraq",
            "Iran",
            "Ireland",
            "Iceland",
            "Spain",
            "Italy",
            "Yemen",
            "Cape Verde",
            "Kazakhstan",
            "Cambodia",
            "Cameroon",
            "Canada",
            "Qatar",
            "Kenya",
            "Cyprus",
            "Kyrgyzstan",
            "Kiribati",
            "China",
            "Cocos (Keeling) Islands",
            "Colombia",
            "Comoros",
            "Congo",
            "Congo_democratic",
            "KNDR",
            "Korea",
            "Costa_Rica",
            "Cote_dIvoire",
            "Cuba",
            "Kuwait",
            "Curacao",
            "LaoS",
            "Latvia",
            "Lesotho",
            "Lebanon",
            "Libya",
            "Liberia",
            "Liechtenstein",
            "Lithuania",
            "Luxembourg",
            "Mauritius",
            "Mauritania",
            "Madagascar",
            "Mayotte",
            "Macao",
            "Malawi",
            "Malaysia",
            "Mali",
            "United States Minor Outlying Islands",
            "Maldives",
            "Malta",
            "Morocco",
            "Martinique",
            "Marshall Islands",
            "Mexico",
            "Micronesia",
            "Mozambique",
            "Moldova",
            "Monaco",
            "Mongolia",
            "Montserrat",
            "Burma",
            "Namibia",
            "Nauru",
            "Nepal",
            "Niger",
            "Nigeria",
            "Netherlands",
            "Nicaragua",
            "Niue",
            "New_Zealand",
            "New_Caledonia",
            "Norway",
            "United_Arab_Emirates",
            "Oman",
            "Bouvet_Island",
            "Isle_of_Man",
            "Norfolk_Island",
            "Christmas_Island",
            "Heard_Island_and_McDonald_Islands",
            "Cayman_Islands",
            "Cook_Islands",
            "Turks_and_Caicos_Islands",
            "Pakistan",
            "Palau",
            "Palestinian",
            "Panama",
            "Vatican",
            "Papua_New_Guinea",
            "Paraguay",
            "Peru",
            "Pitcairn",
            "Poland",
            "Portugal",
            "Puerto_Rico",
            "Macedonia",
            "Reunion",
            "Russia",
            "Rwanda",
            "Romania",
            "Samoa",
            "San_Marino",
            "Sao_Tome_and_Principe",
            "Saudi_Arabia",
            "Saint Helena, Ascension And Tristan Da Cunha",
            "Northern_Mariana_Islands",
            "Saint_Barthelemy",
            "Saint_Martin",
            "Senegal",
            "Saint_Vincent_and_the_Grenadines",
            "Saint_Kitts_and_Nevis",
            "Saint_Lucia",
            "Saint_Pierre_and_Miquelon",
            "Serbia",
            "Seychelles",
            "Singapore",
            "Sint_Maarten",
            "Syrian",
            "Slovakia",
            "Slovenia",
            "GB",
            "USA",
            "Solomon_Islands",
            "Somalia",
            "Sudan",
            "Suriname",
            "Sierra Leone",
            "Tajikistan",
            "Thailand",
            "Taiwan",
            "Tanzania",
            "Timor-Leste",
            "Togo",
            "Tokelau",
            "Tonga",
            "Trinidad_and_Tobago",
            "Tuvalu",
            "Tunisia",
            "Turkmenistan",
            "Turkey",
            "Uganda",
            "Uzbekistan",
            "Ukraine",
            "Wallis_and_Futuna",
            "Uruguay",
            "Faroe_Islands",
            "Fiji",
            "Philippines",
            "Finland",
            "Falkland_Islands",
            "France",
            "French_Guiana",
            "French_Polynesia",
            "French_Southern_Territories",
            "Croatia",
            "CAR",
            "Chad",
            "Montenegro",
            "Czech",
            "Chile",
            "Switzerland",
            "Sweden",
            "Svalbard",
            "Sri_Lanka",
            "Ecuador",
            "Equatorial_Guinea",
            "Aland_Islands",
            "El_Salvador",
            "Eritrea",
            "Eswatini",
            "Estonia",
            "Ethiopia",
            "South_Africa",
            "South Georgia and the South Sandwich Islands",
            "South_Ossetia",
            "South_Sudan",
            "Jamaica",
            "Japan",
            "Caribean",
            "GDR",
            "Nazi",
            "Afrika",
            "Crimea",
            "Nid_Antilla",
            "Russian_Empire",
            "USSR",
            "France_Afar",
            "Chehoclovakia",
            "Jyugoslavia",
        ]
    )
)
async def output_coin(message: types.Message):
    if User.get(tg_id=message.from_user.id) is None:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ")
        return
    coin_st = DataCoin.get_for_user(message.from_user.id)
    strani = strana(f"./users_files/{coin_st[-1][4]}_.xlsx", message.text)
    await vyvod_monet(message, strani)


@dp.message_handler(commands=["swap_list"])
async def swap(message: types.Message):
    if User.get(tg_id=message.from_user.id) is None:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ")
        return
    coin_st = DataCoin.get_for_user(message.from_user.id)
    swap_list = func_swap(f"./users_files/{coin_st[-1][4]}_SWAP.xlsx")
    data_length = 0
    output = ""

    for flag, nominal, year, cena, count, md, name, comment in swap_list:
        part = f"{flag} {nominal} {year} {cena} {count} {md} {name} {comment} \n\n"
        part_len = len(part)
        data_length += part_len
        if data_length > 4096:
            await message.answer(output)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é output.
            output = part
            data_length = part_len
        else:

            output += part
    if not output:
        await message.answer('–°–ø–∏—Å–æ–∫ –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç')
    else:
        await message.answer(output)


@dp.message_handler(commands=["profile"])
async def profile(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    coin_st = DataCoin.get_for_user(message.from_user.id)

    await message.answer(
        f'<a href="https://ru.ucoin.net/uid{coin_st[-1][4]}?v=home">–Ø —Å—Å—ã–ª–∫–∞, –ñ–ú–ò!</a>',
        parse_mode="HTML",
    )


@dp.message_handler(commands=["grafik"])
async def grafik(message: types.Message):
    if User.get(tg_id=message.from_user.id) is None:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ")
        return
    graph_name = get_graph(message.from_user.id)
    photo = InputFile(graph_name)
    await bot.send_photo(chat_id=message.from_user.id, photo=photo)
    os.remove(graph_name)


@dp.message_handler(commands=["delete"])
async def delete1(message: types.Message):
    if User.get(tg_id=message.from_user.id) is None:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ")
        return
    await DeleteForm.confirm_delete.set()
    await message.answer("–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å? \n–ø–∏—à–∏   –¥–∞   –∏–ª–∏   –Ω–µ—Ç")


@dp.message_handler(state=DeleteForm.confirm_delete)
async def delete2(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await DeleteForm.confirm_delete2.set()
        await message.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å–ø—Ä–∞—à–∏–≤–∞—é \n–ø–∏—à–∏   –¥–∞   –∏–ª–∏   –Ω–µ—Ç")
    else:
        await message.answer("–ù—É –∏ –≤—Å—ë, –±–æ–ª—å—à–µ —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞–π")

        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π state


@dp.message_handler(state=DeleteForm.confirm_delete2)
async def delete2(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        User.delete(tg_id=message.from_user.id)
        DataCoin.delete_user_data(tg_id=message.from_user.id)
        await message.answer(
            "–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ \n‚Üì‚Üì‚Üì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
        )

    else:
        await message.answer("–ù—É –∏ –Ω–∞—Ö—É–π —Ç—ã –º–Ω–µ –º–æ–∑–≥—É –µ–±–µ—à—å, –∫–æ–∂–∞–Ω—ã–π –º–µ—à–æ–∫")

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π state


@dp.message_handler()
async def unknown(message: types.Message):
    await message.answer("–°–ª–æ–∂–Ω–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏—à—å")
    await message.answer("‚¨áÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    task = Thread(target=gather_manager, daemon=True, name="–°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ")
    task.start()

    executor.start_polling(dp, skip_updates=True)
